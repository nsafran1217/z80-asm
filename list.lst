Sections:
00: "seg4000" (4000-4175)
01: "seg4ffe" (4FFE-5000)


Source: "RTCDS3231bitBang.s"
                        	     1: ;PORTSEL 0
                        	     2: ;PORTSEL 0
                        	     3: ;CONTSEL 1
                        	     4: ;BASE ADDR $5X
                        	     5: ;$50 - PORT A - DATA
                        	     6: ;$51 - PORT B - DATA
                        	     7: ;$52 - PORT A - CMD
                        	     8: ;$53 - PORT B - CMD ;
                        	     9: 
                        	    10: 
                        	    11: PortACMD    = $52
                        	    12: PortAData   = $50
                        	    13: PortBCMD    = $53
                        	    14: PortBData   = $51
                        	    15: 
                        	    16: sclPin      = 6 ;pin 7
                        	    17: sdaPin      = 7 ;pin 8
                        	    18: sclAndsdaOutput = $00
                        	    19: sclOutAndsdaIn = $80
                        	    20: 
                        	    21: ;Known addresses
                        	    22: InputChar   = $0035
                        	    23: OutputChar  = $003A
                        	    24: Start       = $0040
                        	    25: 
                        	    26: 
                        	    27:    .org $4000
                        	    28: 
                        	    29: InitPortA:
00:4000 3E3F            	    30:     LD A, $3F               ;This sets the port to mode 3 (control)
00:4002 D352            	    31:     OUT (PortACMD), A
00:4004 3E00            	    32:     LD A, sclAndsdaOutput   ;Set all to output
00:4006 D352            	    33:     OUT (PortACMD), A
                        	    34: 
                        	    35: 
                        	    36: ; Procedure to copy time from Hardware RTC to software RTC in CA80 (seconds are maintained in RAM starting from address
                        	    37: ;
                        	    38: ; When finished, the procedure will jump straight to the CA80 Display Time program *E[0]
                        	    39: 
                        	    40: GET_RTC:
                        	    41: 
                        	    42: 
                        	    43: 
00:4008 CD5441          	    44: 	CALL sdaOut
                        	    45: 
                        	    46: GETTIME: ; Synch CA80 time with RTC
                        	    47: 
00:400B 210080          	    48: 	ld hl,$8000
                        	    49: 
00:400E CD3341          	    50: 	call i2cstop		; initiate bus
00:4011 CDA840          	    51: 	call WAIT_4
                        	    52: 	
00:4014 CDBA40          	    53: 	call set_addr		; Set address counter to 00h
00:4017 CD3F41          	    54: 	call start_i2c
00:401A 3ED1            	    55: 	ld a,$D1			; Read current address A1 for EEPROM D0 for RTC
00:401C CD0E41          	    56: 	call putbyte		
00:401F CDD440          	    57: 	call get_ack		; now get first data byte back from slave, SDA-in
00:4022 CDF840          	    58: 	call getbyte		; get seconds data should be in A
00:4025 77              	    59: 	ld (hl),a
00:4026 23              	    60: 	inc hl
00:4027 CDE140          	    61: 	call send_ack ;
00:402A CDF840          	    62: 	call getbyte		; get minutes
00:402D 77              	    63:     ld (hl),a
00:402E 23              	    64:     inc hl
00:402F CDE140          	    65:     call send_ack
00:4032 CDF840          	    66: 	call getbyte		; get hours
00:4035 77              	    67: 	ld (hl),a
00:4036 23              	    68: 	inc hl
00:4037 CDE140          	    69: 	call send_ack
00:403A CDF840          	    70: 	call getbyte		; get date
00:403D 77              	    71: 	ld (hl),a
00:403E 23              	    72: 	inc hl
00:403F CDE140          	    73: 	call send_ack
00:4042 CDF840          	    74: 	call getbyte		; get month
00:4045 77              	    75: 	ld (hl),a
00:4046 23              	    76: 	inc hl
00:4047 CDE140          	    77: 	call send_ack
00:404A CDF840          	    78:     call getbyte            ; get year
00:404D 77              	    79:     ld (hl),a
00:404E 23              	    80:     inc hl
                        	    81: 
00:404F CDEB40          	    82: 	call send_noack
00:4052 CD3341          	    83: 	call i2cstop
                        	    84: 	
00:4055 D7              	    85: 	RST 10h			; clear display procedure
00:4056 80              	    86: 	defb 80h		; all digits
                        	    87: 	
                        	    88: 
                        	    89: 
                        	    90: ;
                        	    91: ;
                        	    92: ; 
                        	    93: ;	
                        	    94: 
                        	    95: 	
                        	    96: SAVETIME:	; save current software RTC to HW RTC procedure, call by: *E[G][2100]=
                        	    97: 
00:4057 CD5441          	    98:     CALL sdaOut
                        	    99: 
00:405A 21EDFF          	   100: 	ld hl,0ffedh		; RTC SEC position in CA80
                        	   101: 	
00:405D CD3341          	   102: 	call i2cstop			; initiate bus
                        	   103: 
00:4060 CDBA40          	   104: 	call set_addr
00:4063 7E              	   105: 	ld a,(hl)			; save seconds to EEPROM under address 00
00:4064 CD0E41          	   106: 	call putbyte
00:4067 CDD440          	   107: 	call get_ack
                        	   108: 	
00:406A CD5441          	   109: 	CALL sdaOut
                        	   110: 	
00:406D 23              	   111: 	inc hl
00:406E 7E              	   112: 	ld a,(hl)		; save minutes to EEPROM under address 01
00:406F CD0E41          	   113: 	call putbyte
00:4072 CDD440          	   114: 	call get_ack
                        	   115: 	
00:4075 CD5441          	   116: 	CALL sdaOut
                        	   117: 	
00:4078 23              	   118: 	inc hl
00:4079 7E              	   119: 	ld a,(hl)		; save hours to EEPROM under address 02
00:407A CD0E41          	   120: 	call putbyte
00:407D CDD440          	   121: 	call get_ack
00:4080 CD5441          	   122: 	CALL sdaOut
                        	   123: 
00:4083 23              	   124: 	inc hl
00:4084 7E              	   125: 	ld a,(hl)		; save day to EEPROM
00:4085 CD0E41          	   126: 	call putbyte
00:4088 CDD440          	   127: 	call get_ack
                        	   128: 	
00:408B CD5441          	   129: 	CALL sdaOut
                        	   130: 
00:408E 23              	   131: 	inc hl
00:408F 7E              	   132: 	ld a,(hl)		; save month to EEPROM
00:4090 CD0E41          	   133: 	call putbyte
00:4093 CDD440          	   134: 	call get_ack
                        	   135: 	
00:4096 CD5441          	   136: 	CALL sdaOut
                        	   137: 	
00:4099 23              	   138: 	inc hl
00:409A 7E              	   139: 	ld a,(hl)
00:409B CD0E41          	   140: 	call putbyte
00:409E CDD440          	   141: 	call get_ack
                        	   142: 	
00:40A1 CD5441          	   143: 	CALL sdaOut
                        	   144: 	
00:40A4 CD3341          	   145: 	call i2cstop
00:40A7 F7              	   146: 	rst 30h
                        	   147: 	
                        	   148: ;
                        	   149: ;
                        	   150: ;
                        	   151: ;
                        	   152: ;
                        	   153: 
                        	   154: 
                        	   155: WAIT_4:	; delay
00:40A8 F5              	   156: 		push	AF
00:40A9 C5              	   157: 		push	BC
00:40AA D5              	   158: 		push	DE
00:40AB 110004          	   159: 		ld	de,0400h
00:40AE 10FE            	   160: W40:	djnz W40
00:40B0 1B              	   161: 		dec de
00:40B1 7A              	   162: 		ld a,d
00:40B2 B7              	   163: 		or a
00:40B3 C2AE40          	   164: 		jp	nz,W40
00:40B6 D1              	   165: 		pop	DE
00:40B7 C1              	   166: 		pop	BC
00:40B8 F1              	   167: 		pop	AF
00:40B9 C9              	   168: 		ret
                        	   169: 
                        	   170: set_addr:
                        	   171: 					; Reset device address counter to 00h, for i2c device on address D0
00:40BA CD3F41          	   172: 	call start_i2c
00:40BD 3ED0            	   173: 	ld a,0D0h		; Write Command A0 for EEPROM D0 for RTC
00:40BF CD0E41          	   174: 	call putbyte	;
00:40C2 CDD440          	   175: 	call get_ack	;
                        	   176: 	
00:40C5 CD5441          	   177: 	CALL sdaOut
                        	   178: 	
00:40C8 3E00            	   179: 	ld a,00h	; read from address 00h
00:40CA CD0E41          	   180: 	call putbyte
00:40CD CDD440          	   181: 	call get_ack	
                        	   182: 
00:40D0 CD5441          	   183: 	CALL sdaOut
                        	   184: 	
00:40D3 C9              	   185: 	ret
                        	   186: 
                        	   187: get_ack:	; Get ACK from i2c slave
00:40D4 CD4F41          	   188:     Call sdaIn
00:40D7 CD5941          	   189: 	call sclset			; raised CLK, now expect "low" on SDA as the sign on ACK	
00:40DA 3A5000          	   190: 	ld A,(PortAData)	 	; here read SDA and look for "LOW" = ACK, "HI" - NOACK or Timeout`
00:40DD CD6041          	   191: 	call sclclr
00:40E0 C9              	   192: 	ret
                        	   193: 	; ToDo - implement the ACK timeout, right now we blindly assume the ACK came in.
                        	   194: 
                        	   195: send_ack: 
00:40E1 CD5441          	   196:     CALL sdaOut	;
00:40E4 CD5941          	   197: 	call sclset		; Clock SCL
00:40E7 CD6041          	   198: 	call sclclr
00:40EA C9              	   199: 	ret
                        	   200: 
                        	   201: send_noack:		; Send NAK (no ACK) to i2c bus (master keeps SDA HI on the 9th bit of data)
00:40EB CD5441          	   202: 	CALL sdaOut	
00:40EE CD6741          	   203: 	call sdaset			; 	
00:40F1 CD5941          	   204: 	call sclset			; Clock SCL 
00:40F4 CD6041          	   205: 	call sclclr
00:40F7 C9              	   206: 	ret
                        	   207: 	
                        	   208: 
                        	   209: 
                        	   210: getbyte:	; Read 8 bits from i2c bus
00:40F8 C5              	   211:         push bc
00:40F9 CD4F41          	   212: 		CALL sdaIn 		;
00:40FC 0608            	   213: 		ld b,8
00:40FE CD5941          	   214: gb1:    call    sclset          ; Clock UP
00:4101 DB50            	   215: 		in A,(PortAData)			; SDA (RX data bit) is in A.0
00:4103 0F              	   216: 		rrca					; move RX data bit to CY
00:4104 CB11            	   217: 		rl      c              	; Shift CY into C
00:4106 CD6041          	   218:         call    sclclr          ; Clock DOWN
00:4109 10F3            	   219:         djnz    gb1
00:410B 79              	   220:         ld a,c             		; Return RX Byte in A
00:410C C1              	   221: 		pop bc
00:410D C9              	   222:         ret
                        	   223: 
                        	   224: 
                        	   225: putbyte: 	; Send byte from A to i2C bus
00:410E C5              	   226:         push    bc
00:410F 4F              	   227:         ld      c,a             ;Shift register
00:4110 0608            	   228:         ld      b,8
00:4112 CB21            	   229: pbks1:  sla     c               ;B[7] => CY
00:4114 CD2841          	   230:         call    sdaput          ; & so to SDA
00:4117 CD2141          	   231:         call    sclclk          ;Clock it
00:411A 10F6            	   232:         djnz    pbks1
00:411C CD6741          	   233:         call    sdaset          ;Leave SDA high, for ACK
00:411F C1              	   234:         pop     bc
00:4120 C9              	   235:         ret
                        	   236: 
                        	   237: 
                        	   238: sclclk:         ;	"Clock" the SCL line Hi -> Lo
00:4121 CD5941          	   239: 			call    sclset
00:4124 CD6041          	   240: 			call    sclclr
00:4127 C9              	   241: 			ret
                        	   242: 
                        	   243: sdaput:        ; CY state copied to SDA line, without changing SCL state
00:4128 DB50            	   244:         in      a,(PortAData)
00:412A CBBF            	   245: 		res     sdaPin,a
00:412C 3002            	   246:         jr      nc,sdz
00:412E CBFF            	   247:         set     sdaPin,a
00:4130 D350            	   248: sdz:    out     (PortAData),a
00:4132 C9              	   249:         ret
                        	   250: 
                        	   251: i2cstop:        ; i2c STOP sequence, SDA goes HI while SCL is HI
00:4133 F5              	   252:         push    af
00:4134 CD6E41          	   253:         call    sdaclr
00:4137 CD5941          	   254:         call    sclset
00:413A CD6741          	   255:         call    sdaset
00:413D F1              	   256:         pop     af
00:413E C9              	   257:         ret
                        	   258: 
                        	   259: start_i2c:          ; i2c START sequence, SDA goes LO while SCL is HI
00:413F CD6741          	   260: 			call	sdaset
00:4142 CD5941          	   261: 			call    sclset
00:4145 CD6E41          	   262: 			call    sdaclr
00:4148 CD6041          	   263: 			call    sclclr
00:414B CD6741          	   264: 			call    sdaset
00:414E C9              	   265: 			ret
                        	   266: 
                        	   267: 
                        	   268: sdaIn:
00:414F 3E80            	   269:     LD A,sclOutAndsdaIn
00:4151 D352            	   270: 	OUT (PortACMD),A
00:4153 C9              	   271:     RET
                        	   272: sdaOut:
00:4154 3E00            	   273:     LD A,sclAndsdaOutput 		
00:4156 D352            	   274: 	OUT (PortACMD),A
00:4158 C9              	   275:     RET
                        	   276: sclset: ; SCL HI without changing SDA     	
00:4159 DB50            	   277:         in      a,(PortAData)
00:415B CBF7            	   278:         set     sclPin,a
00:415D D350            	   279:         out     (PortAData),a
00:415F C9              	   280:         ret
                        	   281: 
                        	   282: sclclr:  ; SCL LO without changing SDA       	
00:4160 DB50            	   283:         in      a,(PortAData)
00:4162 CBB7            	   284:         res     sclPin,a
00:4164 D350            	   285:         out     (PortAData),a
00:4166 C9              	   286:         ret
                        	   287: 
                        	   288: sdaset:	; SDA HI without changing SCL
00:4167 DB50            	   289:         in      a,(PortAData)
00:4169 CBFF            	   290:         set     sdaPin,a
00:416B D350            	   291:         out     (PortAData),a
00:416D C9              	   292:         ret
                        	   293: 
                        	   294: sdaclr: ; SDA LO without changing SCL   	
00:416E DB50            	   295:         in      a,(PortAData)
00:4170 CBBF            	   296:         res     sdaPin,a
00:4172 D350            	   297:         out     (PortAData),a
00:4174 C9              	   298:         ret
                        	   299: 
                        	   300:     .org $4ffe
                        	   301: 
01:4FFE 0000            	   302:     .word $0000


Symbols by name:
GETTIME                          A:400B
GET_RTC                          A:4008
InitPortA                        A:4000
PortACMD                         E:0052
PortAData                        E:0050
SAVETIME                         A:4057
W40                              A:40AE
WAIT_4                           A:40A8
gb1                              A:40FE
get_ack                          A:40D4
getbyte                          A:40F8
i2cstop                          A:4133
pbks1                            A:4112
putbyte                          A:410E
sclAndsdaOutput                  E:0000
sclOutAndsdaIn                   E:0080
sclPin                           E:0006
sclclk                           A:4121
sclclr                           A:4160
sclset                           A:4159
sdaIn                            A:414F
sdaOut                           A:4154
sdaPin                           E:0007
sdaclr                           A:416E
sdaput                           A:4128
sdaset                           A:4167
sdz                              A:4130
send_ack                         A:40E1
send_noack                       A:40EB
set_addr                         A:40BA
start_i2c                        A:413F

Symbols by value:
0000 sclAndsdaOutput
0006 sclPin
0007 sdaPin
0050 PortAData
0052 PortACMD
0080 sclOutAndsdaIn
4000 InitPortA
4008 GET_RTC
400B GETTIME
4057 SAVETIME
40A8 WAIT_4
40AE W40
40BA set_addr
40D4 get_ack
40E1 send_ack
40EB send_noack
40F8 getbyte
40FE gb1
410E putbyte
4112 pbks1
4121 sclclk
4128 sdaput
4130 sdz
4133 i2cstop
413F start_i2c
414F sdaIn
4154 sdaOut
4159 sclset
4160 sclclr
4167 sdaset
416E sdaclr
